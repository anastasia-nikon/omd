# -*- coding: utf-8 -*-
import random

bad_end='–£—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–ª–∞ –∏ –∑–∞–º–µ—Ä–∑–ª–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏, –±–µ–¥–Ω–∞—è —É—Ç–∫–∞ :(. –ö–æ–Ω–µ—Ü.'
good_end='–£—Ç–∫–∞ –≤–µ—Å—å –¥–µ–Ω—å –≥—É–ª—è–ª–∞ –ø–æ –ø–∞—Ä–∫—É –∏ —á—É–¥–µ—Å–Ω–æ –ø—Ä–æ–≤–µ–ª–∞ –≤—Ä–µ–º—è. –ü–æ–±–µ–¥–∞.'

def step1():
    print(
        '–£—Ç–∫–∞–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –ø–æ–≥—É–ª—è—Ç—å. '
        '–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è'
    )
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = str(input())

    if options[option]:
        return step2_umbrella()
    return step2_no_umbrella()

def step2_umbrella():
    print '–£—Ç–∫–∞ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç –∏ –¥—É–º–∞–µ—Ç, –∏–¥—Ç–∏ –ª–∏ –µ–π –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–æ–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—é?'
    option = ''
    options = {'–∏–¥—Ç–∏': True, '–Ω–µ –∏–¥—Ç–∏': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step3_go()
    return step3_not_go()

def step2_no_umbrella():
    print '–£—Ç–∫–∞ –Ω–µ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç. –ö—É–¥–∞ –æ–Ω–∞ –ø–æ–π–¥–µ—Ç –≥—É–ª—è—Ç—å?'
    option = ''
    options = {'–≤ –ª–µ—Å': True, '–≤ –ø–∞—Ä–∫': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step4_forest()
    print good_end

def step3_go():
    print '–£—Ç–∫–∞ –ø—Ä–∏—à–ª–∞ –Ω–∞ –≤—ã–±–æ—Ä—ã, –ø—Ä–æ–≥–æ–ª–æ—Å—É–µ—Ç –æ–Ω–∞ –∑–∞ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤?'
    option = ''
    options = {'–∑–∞': True, '–ø—Ä–æ—Ç–∏–≤': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        print '–£—Ç–∫–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ –∑–∞, –ø–æ–ø—Ä–∞–≤–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã. –†–µ—à–∏—Ç–µ —Å–∞–º–∏, –ø–æ–±–µ–¥–∞ –ª–∏ —ç—Ç–æ.'
    print '–£—Ç–∫–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ –ø—Ä–æ—Ç–∏–≤, –Ω–æ –ø–æ–ø—Ä–∞–≤–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã. –î–∞ –∏ –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –º–Ω–µ–Ω–∏–µ —É—Ç–∫–∏?'

def step3_not_go():
    print '–£—Ç–∫–∞ –Ω–∞–¥–µ–µ—Ç—Å—è –Ω–∞ —è–≤–∫—É –º–µ–Ω–µ–µ 50% –∏ –Ω–µ –∏–¥–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä—ã. –ö—É–¥–∞ –ø–æ–π–¥–µ—Ç —É—Ç–∫–∞ –≤ —Å–µ–π —á—É–¥–µ—Å–Ω—ã–π –¥–µ–Ω—å?'
    option = ''
    options = {'–≤ –ª–µ—Å': True, '–≤ –ø–∞—Ä–∫': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step4_forest()
    return step4_park()

def step4_forest():
    print '–£—Ç–∫–∞ –ø—Ä–∏—à–ª–∞ –≤ –ª–µ—Å –∏ –ø–æ—à–µ–ª –¥–æ–∂–¥—å. –í—É—Ä–Ω—É—Ç—å—Å—è –∑–∞ –∑–æ–Ω—Ç–∏–∫–æ–º?'
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step1()
    return step5_rain()

def step5_rain():
    print '–î–æ–∂–¥—å –≤—Å–µ —É—Å–∏–ª–∏–≤–∞–ª—Å—è, –∏ —Ç—É—Ç —É—Ç–∫–∞ —É–≤–∏–¥–µ–ª–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –¥–æ–º. –ü–æ–ø—Ä–æ–±—É–µ—Ç –ª–∏ —É—Ç–∫–∞ —É–∫—Ä—ã—Ç—å—Å—è –≤ –¥–æ–º–µ?'
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step6_closed_house()
    print bad_end

def step6_closed_house():
    print '–ù–∞ –¥–≤–µ—Ä–∏ –≤–∏—Å–∏—Ç –∫–æ–¥–æ–≤—ã–π –∑–∞–º–æ–∫. –ß—Ç–æ–±—ã –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å, —É—Ç–∫–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9 —Å 5 –ø–æ–ø—ã—Ç–æ–∫.'
    code=random.randint(1,9)
    t=5
    while t>0:
        num=input('–ß–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9: ')
        t = t - 1
        if num==code:
            print '–£—Ç–∫–∞ –ø–µ—Ä–µ–∂–¥–∞–ª–∞ –≥—Ä–æ–∑—É –∏ —Å–ø–æ–∫–æ–π–Ω–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å –¥–æ–º–æ–π. –ü–æ–±–µ–¥–∞.'
            break
        print '–ù–µ–≤–µ—Ä–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: '+str(t)
    else: print bad_end

if __name__ == '__main__':
    step1()